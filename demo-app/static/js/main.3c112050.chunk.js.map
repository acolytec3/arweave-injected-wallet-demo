{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["arweave","Arweave","init","host","port","protocol","App","React","useState","address","setAddress","toAddress","setTo","message","setMessage","amount","setAmount","doTxn","a","createTransaction","data","Buffer","from","target","undefined","quantity","ar","arToWinston","injectedWallet","publicKey","txn","addTag","console","log","window","sign","res","alert","txId","status","connectWallet","addr","hasOwnProperty","wallets","jwkToAddress","className","disabled","onClick","style","marginRight","display","flexDirection","width","position","left","type","placeholder","onChange","evt","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0NAKMA,E,OAAUC,EAAQC,KAAK,CAC3BC,KAAM,cACNC,KAAM,IACNC,SAAU,UAoEGC,IAjEf,WAAgB,IAAD,EACiBC,IAAMC,SAAS,IADhC,mBACNC,EADM,KACGC,EADH,OAEcH,IAAMC,SAAS,IAF7B,mBAENG,EAFM,KAEKC,EAFL,OAGiBL,IAAMC,SAAS,IAHhC,mBAGNK,EAHM,KAGGC,EAHH,OAIeP,IAAMC,SAAS,KAJ9B,mBAINO,EAJM,KAIEC,EAJF,KAKPC,EAAK,uCAAG,8BAAAC,EAAA,sEACIlB,EAAQmB,kBACtB,CACEC,KAAMC,EAAOC,KAAKT,EAAS,QAC3BU,OAAM,OAAEZ,QAAF,IAAEA,SAAaa,EACrBC,SAAUzB,EAAQ0B,GAAGC,YAAYZ,IAEnCa,eAAeC,WAPL,cACRC,EADQ,QASRC,OAAO,eAAgB,aAC3BC,QAAQC,IAAIH,GAVA,SAWII,OAAON,eAAeO,KAAKL,GAX/B,OAWRM,EAXQ,OAYZC,MAAM,sBAAD,OAAuBD,EAAIE,KAA3B,gCAAuDF,EAAIG,OAAOA,SAZ3D,2CAAH,qDAeLC,EAAa,uCAAG,4BAAAtB,EAAA,yDAChBuB,EAAO,IACPP,OAAOQ,eAAe,kBAFN,gCAGL1C,EAAQ2C,QAAQC,aAC3BV,OAAON,eAAeC,WAJN,OAGlBY,EAHkB,OAMlB/B,EAAW+B,GANO,sBAObJ,MAAM,mBAPO,2CAAH,qDAUnB,OACE,sBAAKQ,UAAU,MAAf,UACE,wBACEC,SAAUrC,EACVsC,QAASP,EACTQ,MAAO,CAAEC,YAAa,OAHxB,4BAQCxC,GAAW,0DAA6BA,KACzC,sBAAKuC,MAAO,CAACE,QAAS,OAAQC,cAAe,SAAUC,MAAM,MAAOC,SAAS,WAAYC,KAAK,OAA9F,UACE,uBACEC,KAAK,OACLC,YAAY,UACZC,SAAU,SAACC,GAAD,OAAS5C,EAAW4C,EAAInC,OAAOoC,UAE3C,uBACEJ,KAAK,OACLC,YAAY,aACZC,SAAU,SAACC,GAAD,OAAS9C,EAAM8C,EAAInC,OAAOoC,UAEtC,uBACEJ,KAAK,OACLC,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAS1C,EAAU0C,EAAInC,OAAOoC,UAEpC,wBAAQb,UAAWrC,EAASsC,QAAS9B,EAArC,kD,6JCtDC2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAChE,EAAA,EAAD,IAEFiE,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3c112050.chunk.js","sourcesContent":["//@ts-nocheck\nimport React from \"react\";\nimport \"./App.css\";\nimport Arweave from \"arweave\";\n\nconst arweave = Arweave.init({\n  host: \"arweave.dev\",\n  port: 443,\n  protocol: \"https\",\n});\n\nfunction App() {\n  const [address, setAddress] = React.useState(\"\");\n  const [toAddress, setTo] = React.useState(\"\");\n  const [message, setMessage] = React.useState(\"\");\n  const [amount, setAmount] = React.useState(\"0\");\n  const doTxn = async () => {\n    let txn = await arweave.createTransaction(\n      {\n        data: Buffer.from(message, \"utf8\"),\n        target: toAddress ?? undefined,\n        quantity: arweave.ar.arToWinston(amount),\n      },\n      injectedWallet.publicKey\n    );\n    txn.addTag(\"Content-Type\", \"text/html\");\n    console.log(txn);\n    let res = await window.injectedWallet.sign(txn);\n    alert(`Transaction ID is: ${res.txId} and status code is: ${res.status.status}`)\n  };\n\n  const connectWallet = async () => {\n    let addr = \"\";\n    if (window.hasOwnProperty(\"injectedWallet\")) {\n      addr = await arweave.wallets.jwkToAddress(\n        window.injectedWallet.publicKey\n      );\n      setAddress(addr);\n    } else alert(\"No wallet found\");\n  };\n\n  return (\n    <div className=\"App\">\n      <button\n        disabled={address}\n        onClick={connectWallet}\n        style={{ marginRight: \"5px\" }}\n      >\n        Connect Wallet\n      </button>\n\n      {address && <p>Injected Wallet Address: {address}</p>}\n      <div style={{display: \"flex\", flexDirection: 'column', width:'25%', position:'absolute', left:'50%'}}>\n        <input\n          type=\"text\"\n          placeholder=\"Message\"\n          onChange={(evt) => setMessage(evt.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"To address\"\n          onChange={(evt) => setTo(evt.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Amount to send\"\n          onChange={(evt) => setAmount(evt.target.value)}\n        />\n              <button disabled={!address} onClick={doTxn}>\n        Create and send transaction\n      </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}